Summary

Introduction
A Hackathon/Sprint was organised under the auspices of OGC to progress development of the Environmental Data Retrieval API (EDR-API). It was to be hosted by the US National Wewather Service near Washington DC, from 18-20 March 2020. Unfortunately, because of the global health crisis, the physical face-to-face meeting was cancelled. it was decided to hold a virtual Hackathon/Sprint, more or less keeping to US Washington time (Eastern Daylight savings Time) and to communicate using GoToMeeting teleconferencing facilitles of OGC, email and GitHub.

The EDR-API is intended to allow a small amount of data, as required, to be retrieved by coordinates from data stores that are too large or impractical to copy and transmit. The API is being developed by the OGC EDR API Standard Working Group, whose charter is at https://github.com/opengeospatial/Environmental-Data-Retrieval-API/blob/master/EnvironmentalDataRetrievalAPI-SWG-Charter.adoc , and the latest version of the candidate standard is at https://github.com/opengeospatial/Environmental-Data-Retrieval-API/blob/master/candidate-standard/EDR-candidate-specification.adoc .

The first draft of the candidate standard was based on the OGC API - Features, Part 1: Core and what is now OGC API - Common, Part 1: Core following a hackathon in London during June 2019.

Participants
There were about two dozen attendees, from north America, the far East, and Europe. They represented OGC, government departments, universities and private companies:

Steve Olson, US NWS
Shane Mill , US NWS
Paul Hershberg, US NWS
Dave Blodgett, USGS 
Jim Kreft, USGS 
Chris Little, UK Met Office
Mark Burgoyne, UK Met Office
Pete Trevelyan, UK Met Office
Peng Yue, Wuhan University 
Boyi ShangGuan, Wuhan University 
Lei Hu, Wuhan University 
Zhang Mingda, Wuhan University
Jeff Donze ESRI
Sudhir Shrestha ESRI
Keith Ryden ESRI 
George Percivall, OGC
Josh Liebermann, OGC
Chuck Heazel, HeazelTech LLC
Clemens Portele, Interactive Instruments 
Tom Kralidis, Meteorological Service of Canada
Stephan Siemen, ECMWF 

EDR API Sprint Purpose:
Provide feedback based on the current candidate specification, and assess the compatibility with the OGC API - Features standard and the in-progress OGC API - Common standard. 

EDR API Sprint Goals:
Build implementations of the EDR API service based on existing data stores;
Develop client-side value-added applications that consume data from prototype implementations;
Develop prototype functionality through running code.

EDR API Sprint objectives:
Verify and validate requirements and methods for the query and filter operations of the EDR API;
Rapid prototyping of other geometry types for the EDR API (partitioned grids or tiles, vertical profiles and/or trajectories/corridors);
Make progress on conformance testing of EDR API parts based on queries;
Develop client-side value-added applications that consume data from UK Met Office and NWS API prototype implementations.

EDR API Sprint suggested deliverables:
Code;
Recommended changes to the EDR API specification;
Report on level of compatibility with OGC API Features and Common;
Recommendations for other OGC APIs (Features, Common, etc);
Report on conformance class testing.

Review use cases
Locations for available data and implementations
Demonstration of planned automation tools for data providers
Demonstration of client side APIs (single and multi-domain feature extractions)

Identification of the problem:
Environmental data typically involves huge datasets
Rapid information replacement
Generated by a multitude of data resources
Large number of interested users from multiple domains
Service reliability and scalability is essential!

Why are we using a different approach?
Existing WFS and WCS have powerful query capabilities, however:
They are difficult to scale
They are difficult to secure
It’s hard to guarantee a service level (no silos)
They are difficult to integrate
There is a steep learning curve (complex APIs)

What is the EDR API approach:
Based on simple query patterns
User defines area of interest in time and space
Use Well Known Text (WKT) to define areas
Handle and combine both “feature” and “coverage” data sources
Data publisher responsible for transforming data
All the logic is in the “collection” itself (self describing)

How the EDR API makes data retrieval easier:
Self describing
Avoids large scale duplication of data
Easier to implement
Interoperability through simplicity
Simple to consume
Easier access control
Consistent with OpenAPI specification 

How does the EDR API relate?
Part of a proposed family of the OGC API Common standard
Complementary to existing services
Intended for a different audience (Lowering the bar of entry for OGC web services)
Serve as basic introduction to OGC service
Queries are based on common but distinct geometry types (i.e. points/timeseries, polygons, etc)


Review use cases
Get Parameters for a Point across a Timeseries
Obtain or view a forecast time series of a parameter at a point
Get Unstructured Obs from a Polygon
Show Weather Radar data timeseries
Obtain or view Air Traffic Hazards and Restrictions for an Area

Implementations
Uk Met Office: http://labs.metoffice.gov.uk/edr/
Available data offered (Metars, GFS, NDFD, UK Global Model data, Open Streetmap, DEM)
NWS:https://data-api.mdl.nws.noaa.gov/EDR-API
Available data offered (Metars, Tafs, GFS, NAM, NDFD)
Data Sources
Amazon data sources:  https://registry.opendata.aws/?search=tags:gis,earth%20observation,mapping,meteorological,environmental,transportation


Demonstration of planned automation tools for data providers
Automated aggregation of collections (3D, 4D, 5D)
General Approach
Download model data (grib) for one model run (ie. 12z GFS)
Concatenate the grib files (future work would be to use open_mfdataset in xarray)
Open the concatenated grib file as xarray dataset with pynio engine.
Grab each parameter ID (unique ID determined by pynio), long name, level type, dimensions for each parameter in the dataset and put into a pandas dataframe.
Create a map between dimension names and dimension values (pandas dataframe)
Group common parameters together (unique parameter ID) that have same dimensions
With the information gathered above, can create the collections of parameters (that have common dimensions), and output in JSON.
Convert the original dataset to zarr using the collections JSON. Each zarr datastore represents a specific collection. With the parameters grouped by common dimensions, we will be able to make more complex queries.
Try the Automated aggregation of collections on your own:
https://github.com/ShaneMill1/edr-automation

Demonstration of client side APIs
Demonstrations of client-side APIs
https://data-api.mdl.nws.noaa.gov/EDR-CLIENT-API
http://labs.metoffice.gov.uk/map/wotwdemo/
Uses the EDR API to access time series at a point for:
Observations from a point cloud – latest airfield obs
Gridded forecast current data from US NWS (GFS)
Gridded forecast data from 2 day old UK Met Office Global Unified Model


  (add themes too)

Working Methods
A GitHub repository was established at https://github.com/opengeospatial/EDR-API-Sprint . A branch of the EDR API Candidate standard was also created at https://opengeospatial.github.io/EDR-API-Sprint/edr-api.html so that changes could readily be makde if required. Attendees also raised Issues in the Sprint repository to indicate their objectives, and any issues encountered. discussions were then followed on the Issues tabs.

Also, at the beginning and end of each working day, briefing sessions were held on GoToMeeting to present work done, and to discuss in more depth any issues and their resolutions.

Issues addressed

  (copy titles from Github)
  
Issues resolved  

Issues outstanding
  

Recommendations



Develop Tags for github issues (which objectives)
Summaries and discussion at beginning and end of day
Team formations?  Structured or unstructured?
Poll of how teams map across 3 larger objectives 
Plans for next sprint
Do we need one?
Metadata
Security considerations?
Other geometry types
pub/sub
Integration with other APIs (features/coordinates, maps)
Alignment with decision impact groups like SmartCity, others
AOB?

