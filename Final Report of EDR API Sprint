Summary

Introduction
A Hackathon/Sprint was organised under the auspices of OGC to progress development of the Environmental Data Retrieval API (EDR-API). It was to be hosted by the US National Weather Service near Washington DC, from 18-20 March 2020. Unfortunately, because of the global health crisis, the physical face-to-face meeting was cancelled. It was decided to hold a virtual Hackathon/Sprint, more or less keeping to US Washington time (Eastern Daylight savings Time) and to communicate using GoToMeeting teleconferencing facilitles of OGC, email and GitHub.

The EDR-API is intended to allow a small amount of data, as required, to be retrieved by coordinates from data stores that are too large or impractical to copy and transmit. The data queries are based on common but distinct geometry types (i.e. points/timeseries, polygons, trajectories, etc).

The API is being developed by the OGC EDR API Standard Working Group, whose charter is at https://github.com/opengeospatial/Environmental-Data-Retrieval-API/blob/master/EnvironmentalDataRetrievalAPI-SWG-Charter.adoc , and the latest version of the candidate standard is at https://github.com/opengeospatial/Environmental-Data-Retrieval-API/blob/master/candidate-standard/EDR-candidate-specification.adoc . Background reading material is at https://github.com/opengeospatial/Environmental-Data-Retrieval-API .

The first draft of the candidate standard was based on the OGC API - Features, Part 1: Core and what is now OGC API - Common, Part 1: Core following a hackathon in London during June 2019, both of which follow OGC current policy on API development and are consistent with OpenAPI Version 3.

Participants
There were about two dozen attendees, from north America, the far East, and Europe. They represented OGC, government departments, universities and private companies:

Steve Olson, US NWS
Shane Mill , US NWS
Paul Hershberg, US NWS
Dave Blodgett, USGS 
Jim Kreft, USGS 
Chris Little, UK Met Office
Mark Burgoyne, UK Met Office
Pete Trevelyan, UK Met Office
Peng Yue, Wuhan University 
Boyi ShangGuan, Wuhan University 
Lei Hu, Wuhan University 
Zhang Mingda, Wuhan University
Jeff Donze ESRI
Sudhir Shrestha ESRI
Keith Ryden ESRI 
George Percivall, OGC
Josh Liebermann, OGC
Chuck Heazel, HeazelTech LLC
Clemens Portele, Interactive Instruments 
Tom Kralidis, Meteorological Service of Canada
Stephan Siemen, ECMWF 

Purpose:
The EDR API Sprint was to provide feedback based on the current ERD API candidate specification, and assess the compatibility with the "OGC API - Features - Part 1: Core" https://github.com/opengeospatial/ogcapi-features/tree/master/core/standard standard and the in-progress "OGC API - Common - Part 1: Core standard" https://github.com/opengeospatial/oapi_common/tree/March-2020-Updates/standard . 

Background
Environmental data typically involves huge datastores which are difficult to duplicate and transfer, with the difficulty compounded by rapid information replacement, such as in weather forecasts. Such datastores are often generated by a multitude of data resources, with a large number of interested users from multiple domains.

Much of the data exist in operational environments, where service reliability, availability and scalability, both in terms pf volume and numbers of users, are essential requirements.

Many of the existing services have powerful query capabilities, however some are difficult to scale in volume and numbers of users, making it hard to guarantee service levels. They may be difficult to secure.

Because some of the existing services have relatively complex APIs, there is a steep learning curve and they may be difficult to integrate into production environments. 

EDR API approach:
By using simple query patterns 'sampling' into a large datastore where the data publisher is responsible for transforming and supplying the data, the user only defines area of interest in time and space, using Well Known Text (WKT) making the data simple to consume.
Handle and combine both “feature” and “coverage” data sources

All the logic is in the “collection” itself (self describing) and the self-describing queries.

Previous experiments, prototypes, experiences and production implementations give confidence that this approach avoids large scale duplication of data, is easier to implement, with easier access control supplied by modern API management tools, and gives interoperability through simplicity.

The EDR API is intended to be part of a proposed family of OGC APIs that are complementary to existing OGC Web-based geospatial services.
These new APIs are intended for a different audience, web developers rather than geospatial specialists, and serve as basic introduction to OGC services thus lowering the bar for entry to using OGC web services.

Goals
These were developed in meetings of the EDR Standard WG and the Met Ocean Domain WG, with other input from OGC staff and Members:
* Build implementations of the EDR API service based on existing data stores, both client and server-sides;
* Develop client-side value-added applications that consume data from prototype implementations of EDR API;
* Develop prototype functionality for EDR API through developing and running code.

The goals were refined by the working groups into these more specific objectives and deliverables:

Objectives:
Verify and validate requirements and methods for the Query and Filter operations of the EDR API;
Prototype rapidly other geometry types for the EDR API (partitioned grids or tiles, vertical profiles and/or trajectories/corridors);
Develop client-side value-added applications that consume data from UK Met Office and US NWS prototype EDR API implementations;
Make progress on conformance testing of EDR API parts based on queries.

Proposed deliverables:
* Software Code;
* Recommended changes to the EDR API specification;
* Report on level of compatibility with OGC API Features and Common;
* Recommendations for other OGC APIs (Features, Common, etc);
* Report on conformance class testing.

These goals, objectives and deliverables were all discussed by the attendees prior to the meeting and in the opening session.

Use Cases
The Sprint introduced a quick review of the EDR API use cases at https://github.com/opengeospatial/Environmental-Data-Retrieval-API/tree/master/use-cases . These included:
* Get Parameters for a Point across a Timeseries
* Obtain or view a forecast time series of a parameter at a point
* Get Unstructured Obs from within a Polygon
* Show Weather Radar data timeseries
* Obtain or view Air Traffic Hazards and Restrictions for an Area

Existing Data and Implementations
Implementations:
* UK Met Office: http://labs.metoffice.gov.uk/edr/
Available data offered (Metars, GFS, NDFD, UK Global Model data, Open Streetmap, DEM)

* NWS:https://data-api.mdl.nws.noaa.gov/EDR-API
Available data offered (Metars, Tafs, GFS, NAM, NDFD)

Data Sources
* Amazon data sources:  https://registry.opendata.aws/?search=tags:gis,earth%20observation,mapping,meteorological,environmental,transportation

Demonstration of planned automation tools for data providers
Automated aggregation of collections (3D, 4D, 5D)
General Approach
Download model data (grib) for one model run (ie. 12z GFS)
Concatenate the grib files (future work would be to use open_mfdataset in xarray)
Open the concatenated grib file as xarray dataset with pynio engine.
Grab each parameter ID (unique ID determined by pynio), long name, level type, dimensions for each parameter in the dataset and put into a pandas dataframe.
Create a map between dimension names and dimension values (pandas dataframe)
Group common parameters together (unique parameter ID) that have same dimensions
With the information gathered above, can create the collections of parameters (that have common dimensions), and output in JSON.
Convert the original dataset to zarr using the collections JSON. Each zarr datastore represents a specific collection. With the parameters grouped by common dimensions, we will be able to make more complex queries.
Try the Automated aggregation of collections on your own: https://github.com/ShaneMill1/edr-automation

Demonstration of client side APIs (single and multi-domain feature extractions)
https://data-api.mdl.nws.noaa.gov/EDR-CLIENT-API
http://labs.metoffice.gov.uk/map/wotwdemo/
Uses the EDR API to access time series at a point for:
Observations from a point cloud – latest airfield obs
Gridded forecast current data from US NWS (GFS)
Gridded forecast data from 2 day old UK Met Office Global Unified Model

Working Methods
A GitHub repository was established at https://github.com/opengeospatial/EDR-API-Sprint . A branch of the EDR API Candidate standard was also created at https://opengeospatial.github.io/EDR-API-Sprint/edr-api.html so that changes could readily be made if required. Attendees also raised Issues in the Sprint repository to indicate their objectives, and any issues encountered. Discussions were then followed on the Issues tabs and tagged according to their content.

Background information was supplied in a Slide presentation https://docs.google.com/presentation/d/1vU8O7dnkima9Vch_T0ebECV5RRjSw-8Kuox15gN2Z4k/edit?usp=sharing and wiki pages at https://github.com/opengeospatial/EDR-API-Sprint/wiki .

Also, at the beginning and end of each working day, briefing sessions were held on GoToMeeting to present work done, and to discuss in more depth any issues and their resolutions. Sessions were chosen to enable the different time zones to take part.

Objectives
Most attendees, either individuals or teams, identified specific objectives that they would like to acheive. These were:

1. Develop new EDR API server and client, Mark Burgoyne (Issue #20) 
This is still work in progress, to track and implement the changes to the latest EDI API specification, and also to try out some novel ideas. This addressed the Issue #04, Objective: Point, timeseries at a point, and vertical profile at a point

2. Demonstrate automatic harvesting of metadata from aggregations of data stores to improve search capabilities for use in conjunction with the EDR API, US NWS (Issue #19 and Issue #14))

3. Implement Trajectory queries against typhoon/hurricane data. Wuhan University (Issue #03)
This is the same as Issue #09, Objective: Trajectory, 2D, 3D or 4D. The trajectory query was successfully implemented in all the 2D, 3D and 4D cases, using the EDR API specification proposal to use Well Known Text (WKT) Linestring formats.

4. Explore putting EDR API on ESRI REST API image server, UK Met Office, ESRI (Issue #02 and Issue #17)
This is ongoing work. There do not seem to be any fundamental architectural problems with possible approaches for the proposed use cases.

5. Use EDR API to retrieve feature orientated observations from hydrological network data stores, USGS (Issue #01) 

6. Conformance testing, ECMWF (Issue #16)
There was general support for this topic, but no work was done.

7. Implement and demonstrate a STAC (Spatio-Temporal Asset Catalog) for accessing meteorological real-time data stores in pygeoapi, Meteorological Service of Canada (Issue #21)   
This is ongoing work that started after the Sprint days.
STAC provides a common language to describe a range of geospatial information, so it can more easily be indexed and discovered. A 'spatiotemporal asset' is any file that represents information about the earth captured in a certain space and time.
While STAC work has been primarily focused on EO imagery, there is value in investigating STAC capability for real-time Numerical Weather Prediction (NWP) data offerings. This would allow for arbitrary hierarchy based on NWP workflow (model runs, forecast hours, forecast variables, etc.) as well as simple, file-based discovery/traversal of same.
Questions
•	how would NWP look as a static catalog of (in our case) GRIB2 files?
•	how would a given STAC implementation for MetOcean compare to OGC API - Records
•	would a MetOcean STAC profile be valuable?
Results
•	implemented a STAC catalog for a (very very small subset) of our Global Deterministic Prediction System (GDPS)
•	code: https://github.com/geopython/pygeoapi/tree/stac2
•	deployment: 
o	root catalog: http://52.170.144.218:8000/stac/nwp/catalog.json
o	model run: http://52.170.144.218:8000/stac/nwp/00/catalog.json
o	model run/forecast hour: http://52.170.144.218:8000/stac/nwp/00/000/catalog.json
o	data: http://52.170.144.218:8000/stac/nwp/00/000/CMC_glb_DEPR_ISBL_750_latlon.15x.15_2020040100_P000.grib2.json
Observations
•	successfully tested with stac-validator
•	data properties are basically GRIB2 metadata
•	links are initially minimal: we could have links back to related EDR workflows (or OGC API - Coverages, OGC API - Processes)
•	search is not in scope for STAC Catalog (more OGC API - Records and STAC Catalog)
Future Work
•	investigate integration with OGC API - Records and STAC Catalog 
o	GDPS is a collection level discovery metadata in the scope of OGC API - Records
o	searching within GDPS would be a link from the OGC API - Records document/search result to the STAC API (essentially searching model runs/forecast hours of data)

8. The remaining Issues #04 - #10 were generic objectives covering the full scope of data query patterns of the EDR API, but divided up acording to expected difficulty.
*  Point, timeseries at a point, and vertical profile at a point
*  Polygon and tile (2D)
*  Polygon in 3D or 4D
*  Polygons in 3D and 4D
*  Tile/Cube in 3D or 4D
*  Trajectory, 2D, 3D or 4D
*  Corridor, 3D or 4D

Issues arising and resolved


Issues outstanding



Issue #18 Streaming of EDR API response media types

Issue #15 JSON-Schema for /collections/{collectionID}/items
5
Issue #12 Items view of EDR resources.
7
Issue #11 Groups versus Collections
5


Recommendations


Team formations?  Structured or unstructured?
Poll of how teams map across 3 larger objectives 
Plans for next sprint
Do we need one?
Metadata
Security considerations?
Other geometry types
pub/sub
Integration with other APIs (features/coordinates, maps)
Alignment with decision impact groups like SmartCity, others
AOB?

